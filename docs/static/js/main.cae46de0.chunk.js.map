{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","columns","elements","Array","fill","type","id","map","elm","idx","state","setState","className","Toolbar","setColumns","ControlPanel","setElementType","GridPanel","props","setElement","ElementController","setType","GridItem","numCols","gridType","ColumnsButton","num_columns","current_setting","reset_column","col","is_active","onClick","_","art_active","sp_active","imp_active","ad_active","ref_active","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cae46de0.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport './App.scss'\n\ntype ElementType = \"article\" | \"sports\" | \"important\" | \"ad\" | \"references\"\n\ninterface DisplayElement {\n    type: ElementType\n    id: string\n}\n\ninterface AppState {\n    columns: number\n    elements: DisplayElement[]\n\n}\n\nfunction initialAppState(): AppState {\n\n    const elements = new Array<DisplayElement>(40).fill({type: \"article\", id: \"\"}).map(\n        (elm, idx) => {\n            return {type: \"article\", id: `${idx + 1}`} as DisplayElement\n        }\n    )\n    return {\n        columns: 3,\n        elements\n    }\n}\n\nexport function App() {\n    const [state, setState]: [AppState, (state: AppState) => void] = useState(initialAppState());\n    const setColumns = (columns: number) => setState({...state, columns})\n    const setElementType=(idx:number, type: ElementType) => {\n        let elements = [...state.elements]\n        elements[idx] = { ...elements[idx], type}\n        setState({...state, elements})\n    }\n    return (\n        <div className=\"App\">\n            <Toolbar columns={state.columns} setColumns={setColumns}/>\n            <ControlPanel elements={state.elements} setElementType={setElementType}/>\n            <GridPanel {...state}/>\n        </div>\n    )\n}\n\ninterface ControlPanelProps {\n    elements: DisplayElement[]\n    setElementType: (idx: number, type: ElementType)=>void\n}\n\nfunction ControlPanel(props: ControlPanelProps) {\n    const setElement=(idx:number)=>(type: ElementType)=>{\n        props.setElementType(idx, type)\n        //props.elements[idx] = {...props.elements[idx], type}\n    }\n    const elements = props.elements.map((elm,idx) =>\n        <ElementController key={idx} elm={elm} setType={setElement(idx)}/>\n    )\n    return (<div className=\"ControlPanel\">\n        {elements}\n    </div>)\n}\n\ninterface GridPanelProps {\n    columns: number\n    elements: DisplayElement[]\n}\n\nfunction GridPanel(props: GridPanelProps) {\n    const elements = props.elements.map((elm) => GridItem(elm))\n\n    const numCols = props.columns;\n    const gridType = numCols === 3 ? \"three-columns\" : numCols === 2 ? \"two-columns\" : \"one-column\";\n    return (<div className=\"GridPanel\">\n        <div className={`the-grid ${gridType}`}>\n            {elements}\n        </div>\n    </div>)\n}\n\nfunction GridItem(props: DisplayElement) {\n    return (<div className={`item ${props.type}`} key={props.id}>\n        {`${props.id} ${props.type}`}\n    </div>)\n}\n\ninterface ToolbarProps {\n    columns: number\n    setColumns: (val: number) => void\n}\n\nfunction Toolbar(props: ToolbarProps) {\n    return (\n        <div className=\"Toolbar\">\n            <span> </span>\n            <ColumnsButton num_columns={1} current_setting={props.columns} reset_column={col => props.setColumns(col)}/>\n            <ColumnsButton num_columns={2} current_setting={props.columns} reset_column={col => props.setColumns(col)}/>\n            <ColumnsButton num_columns={3} current_setting={props.columns} reset_column={col => props.setColumns(col)}/>\n        </div>\n    )\n}\n\ninterface ColumnsButtonProps {\n    num_columns: number\n    current_setting: number\n    reset_column: (column: number) => void\n}\n\nfunction ColumnsButton(props: ColumnsButtonProps) {\n    const is_active = props.num_columns === props.current_setting ? \"active\" : \"\"\n    const set_column = () => props.reset_column(props.num_columns)\n\n    return (\n        <span className={`button ${is_active}`} onClick={(_) => set_column()}> {props.num_columns} </span>\n    )\n}\n\ninterface ElementControllerProps {\n    elm: DisplayElement\n    setType: ( elementType: ElementType)=>void\n}\n\nfunction ElementController(props: ElementControllerProps) {\n    const art_active = props.elm.type === 'article' ? \"active\" : \"\"\n    const sp_active = props.elm.type === 'sports' ? \"active\" : \"\"\n    const imp_active = props.elm.type === 'important' ? \"active\" : \"\"\n    const ad_active = props.elm.type === 'ad' ? \"active\" : \"\"\n    const ref_active = props.elm.type === 'references' ? \"active\" : \"\"\n    return (\n        <div className='button-container'>\n            <span className=\"item-name\" onClick={(_)=>props.setType(\"article\")}>{props.elm.id}</span>\n            <span className={`small-button ${art_active} article`} onClick={(_)=>props.setType(\"article\")}>art</span>\n            <span className={`small-button ${sp_active} sports`} onClick={(_)=>props.setType(\"sports\")}>sp</span>\n            <span className={`small-button ${imp_active} important`} onClick={(_)=>props.setType(\"important\")}>imp</span>\n            <span className={`small-button ${ad_active} ad`} onClick={(_)=>props.setType(\"ad\")}>ad</span>\n            <span className={`small-button ${ref_active} references`} onClick={(_)=>props.setType(\"references\")}>ref</span>\n        </div>\n    )\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport {App}  from './App';\n\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App  />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}